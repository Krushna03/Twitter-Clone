On frontend:
Fo setting up the Graphql, some config is required and it is as follows:

1. codegen : It watches the schema & generate the ts for you.

* We need to install graphql-request
* Then setup the codegen by installing some commands & then the file is created need to make the file work properly by checking the path as it might cause error.
* Then need to do init to make sure the things are configured to create a file.

Install the @graphql-codegen/client-preset
Main package for the 

MAIN:
Error occur when try to run the npm run codegen command
* Add concurrently 
& then add this, then it works & update the import after that 

import { graphql } from "graphql"

export const verifyUserGoogleTokenQuery = graphql(`#graphql
  query VerifyUserGoogleToken($token: String!){
    verifyGoogleToken(token: $token)
  }
`) 



S3 Bucket creation:
create user : using IAM user scetion
give permission : using attach policy directly
Give full access : Amazons3FullAccess
Create access credentials : from security scetion
Select the access type : Application running outside AWS 
Save the crentials in ENV

S3 creation
Then create the s3 bucket by searching over there.
create bucket by filling details.
disable the "Block public access" 
go to permission
1. disable the block all permission
2. add the json based permission
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": [
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::your-bucket-name/*"
            ]
        }
    ]
}
Here we are allow anybody to access the object, see the photos only using this arn arn:aws:s3:::your-bucket-name/*".

Then setup the cors policy to get access by providing the frontend domain 
[
    {
        "AllowedHeaders": [
            "*"
        ],
        "AllowedMethods": [
            "GET",
            "PUT",
            "POST",
            "DELETE",
            "HEAD"
        ],
        "AllowedOrigins": [
            "http://your-website.com",
            "https://your-secure-website.com"
        ],
        "ExposeHeaders": [],
        "MaxAgeSeconds": 3000
    }
]

FLOW:
1. client make request for upload to backend,
2. backend generate pre-signed url to send to the frontend
3. The frontend collect the url & using this url it will send the image to the s3 bucket. 

Package for this:
    "@aws-sdk/client-s3": "^3.911.0",
    "@aws-sdk/s3-request-presigner": "^3.911.0",